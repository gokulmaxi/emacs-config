#+TITLE: DT's GNU Emacs Config
#+AUTHOR: Gokulakrishnan D P
#+DESCRIPTION: DT's personal Emacs config.
#+STARTUP: overview
#+OPTIONS: toc:2

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)
#+end_src

** General Keybindings

#+begin_src emacs-lisp
        (use-package general
        :config
        (general-evil-setup)

        ;; set up 'SPC' as the global leader key
        (general-create-definer gdp/leader-keys
          :states '(normal insert visual emacs)
          :keymaps 'override
          :prefix "SPC" ;; set leader
          :global-prefix "M-SPC") ;; access leader in insert mode

        (gdp/leader-keys
          "." '(find-file :wk "Find file")
          "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
          "f f" '(project-find-file :wk "Find recent files")
          "f r" '(counsel-recentf :wk "Find recent files")
          "TAB TAB" '(comment-line :wk "Comment lines"))

        (gdp/leader-keys
          "b" '(:ignore t :wk "buffer")
          "b b" '(switch-to-buffer :wk "Switch buffer")
          "b i" '(ibuffer :wk "Ibuffer")
          "b k" '(kill-this-buffer :wk "Kill this buffer")
          "b n" '(next-buffer :wk "Next buffer")
          "b p" '(previous-buffer :wk "Previous buffer")
          "b r" '(revert-buffer :wk "Reload buffer"))

        (gdp/leader-keys
          "g" '(:ignore t :wk "Git")
          "g b" '(magit-branch-checkout :wk "Checkout")
          "g c" '(magit-commit :Wk "Checkout")
          "g p" '(magit-push-current :wk "Push")
        )
       (gdp/leader-keys
          "h" '(:ignore t :wk "Help")
          "h f" '(describe-function :wk "Describe function")
          "h v" '(describe-variable :wk "Describe variable")
          ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
          "h r r" '(reload-init-file :wk "Reload emacs config"))

        (gdp/leader-keys
          "t" '(:ignore t :wk "Toggle")
          "t e" '(gdp/vterm-execute-src-block :wk "Toggle line numbers")
          "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
          "t t" '(visual-line-mode :wk "Toggle truncated lines")
          "t v" '(vterm-toggle :wk "Toggle vterm"))

        (gdp/leader-keys
          "w" '(:ignore t :wk "Windows")
          ;; Window splits
          "w c" '(evil-window-delete :wk "Close window")
          "w n" '(evil-window-new :wk "New window")
          "w s" '(evil-window-split :wk "Horizontal split window")
          "w v" '(evil-window-vsplit :wk "Vertical split window")
          ;; Window motions
          "w h" '(evil-window-left :wk "Window left")
          "w j" '(evil-window-down :wk "Window down")
          "w k" '(evil-window-up :wk "Window up")
          "w l" '(evil-window-right :wk "Window right")
          "w w" '(evil-window-next :wk "Goto next window")
          ;; Move Windows
          "w H" '(buf-move-left :wk "Buffer move left")
          "w J" '(buf-move-down :wk "Buffer move down")
          "w K" '(buf-move-up :wk "Buffer move up")
          "w L" '(buf-move-right :wk "Buffer move right"))
      )

#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(bookmark dashboard dired ibuffer magit org org-roam ))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src


** Minor setting
*** set escape to global escape
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** custom functions
*** execcute org src block vterm
#+begin_src emacs-lisp
(defun gdp/vterm-execute-src-block ()
     "Insert text of current line in vterm and execute."
     (interactive)
     (require 'vterm)
     (eval-when-compile (require 'subr-x))
     (let ((command (plist-get (cadr (org-element-at-point)) :value)))
       (let ((buf (current-buffer)))
         (unless (get-buffer vterm-buffer-name)
           (vterm))
         (display-buffer vterm-buffer-name t)
         (switch-to-buffer-other-window vterm-buffer-name)
         (vterm--goto-line -1)
         ;; (message command)
         (vterm-send-string command)
         ;; (vterm-send-return)
         (switch-to-buffer-other-window buf)
         )))
#+end_src
** custom backup directory
#+begin_src emacs-lisp
;; Write backups to ~/.emacs.d/backup/
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying      t  ; Don't de-link hard links
      version-control        t  ; Use version numbers on backups
      delete-old-versions    t  ; Automatically delete excess backups:
      kept-new-versions      20 ; how many of the newest versions to keep
      kept-old-versions      5) ; and how many of the old
#+end_src
** treemacs
#+begin_src emacs-lisp
      (use-package treemacs
        :ensure t
        :defer t
        :init
        (with-eval-after-load 'winum
          (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
        :config
        (progn
          (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
                treemacs-deferred-git-apply-delay        0.5
                treemacs-directory-name-transformer      #'identity
                treemacs-display-in-side-window          t
                treemacs-eldoc-display                   'simple
                treemacs-file-event-delay                2000
                treemacs-file-extension-regex            treemacs-last-period-regex-value
                treemacs-file-follow-delay               0.2
                treemacs-file-name-transformer           #'identity
                treemacs-follow-after-init               t
                treemacs-expand-after-init               t
                treemacs-find-workspace-method           'find-for-file-or-pick-first
                treemacs-git-command-pipe                ""
                treemacs-goto-tag-strategy               'refetch-index
                treemacs-header-scroll-indicators        '(nil . "^^^^^^")
                treemacs-hide-dot-git-directory          t
                treemacs-indentation                     2
                treemacs-indentation-string              " "
                treemacs-is-never-other-window           nil
                treemacs-max-git-entries                 5000
                treemacs-missing-project-action          'ask
                treemacs-move-forward-on-expand          nil
                treemacs-no-png-images                   nil
                treemacs-no-delete-other-windows         t
                treemacs-project-follow-cleanup          nil
                treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
                treemacs-position                        'left
                treemacs-read-string-input               'from-child-frame
                treemacs-recenter-distance               0.1
                treemacs-recenter-after-file-follow      nil
                treemacs-recenter-after-tag-follow       nil
                treemacs-recenter-after-project-jump     'always
                treemacs-recenter-after-project-expand   'on-distance
                treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
                treemacs-project-follow-into-home        nil
                treemacs-show-cursor                     nil
                treemacs-show-hidden-files               t
                treemacs-silent-filewatch                nil
                treemacs-silent-refresh                  nil
                treemacs-sorting                         'alphabetic-asc
                treemacs-select-when-already-in-treemacs 'move-back
                treemacs-space-between-root-nodes        t
                treemacs-tag-follow-cleanup              t
                treemacs-tag-follow-delay                1.5
                treemacs-text-scale                      nil
                treemacs-user-mode-line-format           nil
                treemacs-user-header-line-format         nil
                treemacs-wide-toggle-width               70
                treemacs-width                           35
                treemacs-width-increment                 1
                treemacs-width-is-initially-locked       t
                treemacs-workspace-switch-cleanup        nil)

          ;; The default width and height of the icons is 22 pixels. If you are
          ;; using a Hi-DPI display, uncomment this to double the icon size.
          ;;(treemacs-resize-icons 44)

          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode 'always)
          (when treemacs-python-executable
            (treemacs-git-commit-diff-mode t))

          (pcase (cons (not (null (executable-find "git")))
                       (not (null treemacs-python-executable)))
            (`(t . t)
             (treemacs-git-mode 'deferred))
            (`(t . _)
             (treemacs-git-mode 'simple)))

          (treemacs-hide-gitignored-files-mode nil))
        :bind
        (:map global-map
              ("M-0"       . treemacs-select-window)
              ("C-x t 1"   . treemacs-delete-other-windows)
              ("C-x t t"   . treemacs)
              ("C-x t d"   . treemacs-select-directory)
              ("C-x t B"   . treemacs-bookmark)
              ("C-x t C-t" . treemacs-find-file)
              ("C-x t M-t" . treemacs-find-tag)))

      (use-package treemacs-evil
        :after (treemacs evil)
        :ensure t)

      (use-package treemacs-projectile
        :after (treemacs projectile)
        :ensure t)

      (use-package treemacs-icons-dired
        :hook (dired-mode . treemacs-icons-dired-enable-once)
        :ensure t)

    
      (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
        :after (treemacs persp-mode) ;;or perspective vs. persp-mode
        :ensure t
        :config (treemacs-set-scope-type 'Perspectives))

      (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
        :after (treemacs)
        :ensure t
        :config (treemacs-set-scope-type 'Tabs))

      (use-package treemacs-all-the-icons
        :after (treemacs)
        :ensure t
        :config (treemacs-load-theme "all-the-icons")
  )
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
    (menu-bar-mode 1)
    ;; (setq frame-title-format "%b")
    (tool-bar-mode 1)
    (scroll-bar-mode -1)
    ;; (add-to-list 'default-frame-alist '(undecorated . t))
  (set-frame-parameter (selected-frame) 'alpha '(100 100))

  (add-to-list 'default-frame-alist '(alpha 100 100))
#+end_src

** Load doom theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-gruvbox") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC
** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Better modeline

#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :elpaca t
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))
    (setq dashboard-center-content t)
#+end_src
* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org-tempo
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
** Org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "/Users/presidio/Documents/notes"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
  #+end_src
** Org roam ui
#+begin_src emacs-lisp
        (use-package org-roam-ui
    :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start ))

#+end_src

** Org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-special-todo-items t))
#+end_src
** Org-mordern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :hook (org-mode . org-modern-mode)
    ;; :config
)
#+end_src
* General
** flymake
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src
** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
           ("C-j" . vertico-next)
           ("C-k" . vertico-previous)
           ("C-f" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))


  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** posframe for vertico
#+begin_src emacs-lisp
  (use-package vertico-posframe
  :config
  (setq vertico-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))
  (setq vertico-posframe-border-width 3)

  :init
  (vertico-posframe-mode)
)
#+end_src


** company
#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.1)
    (global-company-mode t)
    ;; (company-tng-configure-default)
    (setq company-minimum-prefix-length 3)
    (setq company-selection-wrap-around t)
    )
#+end_src
** smart parens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure smartparens  ;; install the package
    :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
    :config
    ;; load default config
    (require 'smartparens-config))
#+end_src
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :hook (vterm-mode . doom-mark-buffer-as-real-h)
    :hook (vterm-mode . hide-mode-line-mode)
    :ensure t)
#+end_src
*** vterm toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src
** sideline
#+begin_src emacs-lisp
  (use-package sideline
    :init
    (setq sideline-backends-left-skip-current-line t   ; don't display on current line (left)
          sideline-backends-right-skip-current-line t  ; don't display on current line (right)
          sideline-order-left 'down                    ; or 'up
          sideline-order-right 'up                     ; or 'down
          sideline-format-left "%s   "                 ; format for left aligment
          sideline-format-right "   %s"                ; format for right aligment
          sideline-priority 100                        ; overlays' priority
          sideline-display-backend-name t)
    :hook ((flycheck-mode . sideline-mode)   ; for `sideline-flycheck`
           (flymake-mode  . sideline-mode))  ; for `sideline-flymake
    )
        #+end_src
** indent highlight
#+begin_src emacs-lisp
  (use-package indent-bars
  :elpaca (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :hook ((python-mode yaml-mode) . indent-bars-mode)) ; or whichever modes you prefer
     (setq
    indent-bars-prefer-character t
  indent-bars-treesit-support t
  indent-bars-no-descend-string t
    indent-bars-color '(highlight :face-bg t :blend 0.3)
    indent-bars-pattern " . . . . ." ; play with the number of dots for your usual font size
    indent-bars-width-frac 0.25
    indent-bars-pad-frac 0.1)
  #+end_src
* Development
** Commenting

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** bicep mode
#+begin_src emacs-lisp
  (use-package bicep-mode
    :elpaca
    (bicep-mode :type git :host github :repo "christiaan-janssen/bicep-mode")
    )
#+end_src

** Lsp-mode
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (
           (lsp-mode . efs/lsp-mode-setup)
           (terraform-mode . lsp-deferred)
           )
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
  )

#+end_src
** Lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src
** Python
Make sure you have the pyls language server installed before trying lsp-mode
#+begin_src shell
pip install --user "python-language-server[all]"
#+end_src
#+begin_src emacs-lisp
  (use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src
You can use the pyvenv package to use virtualenv environments in Emacs. The pyvenv-activate command should configure Emacs to cause lsp-mode and dap-mode to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.
#+begin_src emacs-lisp
(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))
#+end_src
** Projectile
Projectile is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/")
    (setq projectile-project-search-path '("~/Projects/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
#+end_src

** Treesitter
#+begin_src emacs-lisp
(setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

** Terraform
#+begin_src emacs-lisp
  (setq lsp-disabled-clients '(tfls))
  (use-package terraform-mode
    ;; if using straight
    ;; :straight t

    ;; if using package.el
    ;; :ensure t
    :custom (terraform-indent-level 4)
    :config
    (defun my-terraform-mode-init ()
      ;; if you want to use outline-minor-mode
      ;; (outline-minor-mode 1)
      )
    (add-hook 'terraform-mode-hook 'my-terraform-mode-init))
#+end_src

** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :bind (:map yas-minor-mode-map
              ("C-c C-e" . yas-expand))

  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  ;;(yas-global-mode 1)
  (setq yas-prompt-functions '(yas-dropdown-prompt
                               yas-ido-prompt
                               yas-completing-prompt)))
#+end_src

** yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src
